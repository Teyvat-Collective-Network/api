import jwt from "@elysiajs/jwt";
import Elysia, { t } from "elysia";
import logger from "./logger.js";
import schemas from "./schemas.js";
import { broadcast } from "./websockets.js";

export default new Elysia()
    .use(jwt({ secret: Bun.env.JWT_SECRET! }))
    .get(
        "/login/:id",
        async ({ jwt, params: { id }, query: { internal } }) => {
            logger.info({ internal, user: id }, "a750cebb-36f8-4eaa-9d33-5765aac5249d Signing login token");
            const now = Date.now();

            return await jwt.sign({
                created: now,
                expires: internal === "true" ? now + 20000 : now + 30 * 24 * 60 * 60 * 1000,
                internal: internal === "true",
                id,
                scopes: ["all"],
            } as any);
        },
        {
            params: t.Object({ id: schemas.snowflake("The user's ID.") }),
            query: t.Object({
                internal: t.Optional(t.String({ description: 'If "true", this token was generated by the bot and will expire much sooner.' })),
            }),
        },
    )
    .post(
        "/push",
        async ({ body: { topic, messages } }) => {
            await broadcast(topic, ...messages);
        },
        {
            body: t.Object({
                topic: t.String(),
                messages: t.Array(t.Array(t.Any())),
            }),
        },
    )
    .listen(Bun.env.INTERNAL_PORT || 4001);
